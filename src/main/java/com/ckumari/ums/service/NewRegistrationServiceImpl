package com.gmaurya.ums.service;
import java.util.Optional;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.gmaurya.ums.dto.ForgotPasswordDto;
import com.gmaurya.ums.dto.LoginDto;
import com.gmaurya.ums.dto.RegistrationDto;
import com.gmaurya.ums.dto.ResetPasswordDto;
import com.gmaurya.ums.entity.Registration;
import com.gmaurya.ums.repository.RegistrationRepository;

@Service
public class RegistrationServiceImpl implements RegistrationService{

	private RegistrationRepository registrationRepository;	
	private final PasswordEncoder passwordEncoder;
	
	//Parameterized Constructor
	public RegistrationServiceImpl(RegistrationRepository registrationRepository, PasswordEncoder passwordEncoder) {
		super();
		this.registrationRepository = registrationRepository;
		this.passwordEncoder = passwordEncoder;
	}
	
	@Override
    public Registration save(RegistrationDto registrationDto) {

        Registration registration = new Registration(
            registrationDto.getEmail(),
            passwordEncoder.encode(registrationDto.getPassword()), // Encode the password
            registrationDto.getFirst_name(),
            registrationDto.getMiddle_name(),
            registrationDto.getLast_name(),
            registrationDto.getHouse_no(),
            registrationDto.getStreet_name(),
            registrationDto.getCity(),
            registrationDto.getState(),
            registrationDto.getCountry(),
            registrationDto.getPin_code(),
            registrationDto.getPhone_no(),
            registrationDto.getSalutation(),
            registrationDto.getQuestion_1(),
            registrationDto.getQuestion_2(),
            registrationDto.getQuestion_3()
        );
		return registrationRepository.save(registration);
	}


	@Override
    public boolean validateSecurityQuestions(ForgotPasswordDto forgotPasswordDto) {
        Optional<Registration> optionalRegistration = registrationRepository.findById(forgotPasswordDto.getEmail());
        if (optionalRegistration.isPresent()) {
            Registration registration = optionalRegistration.get();
            return registration.getQuestion_1().equals(forgotPasswordDto.getQuestion_1()) &&
                   registration.getQuestion_2().equals(forgotPasswordDto.getQuestion_2()) &&
                   registration.getQuestion_3().equals(forgotPasswordDto.getQuestion_3());
        }
        return false;
    }

	@Override
	public boolean resetPassword(ResetPasswordDto resetPasswordDto) {
		Optional<Registration> optionalUser = registrationRepository.findById(resetPasswordDto.getEmail());
	    
	    if (optionalUser.isPresent()) {
	        Registration registration = optionalUser.get();
	        
	        // Log the old and new password for debugging (make sure not to log sensitive information in production)
	        System.out.println("Old password: " + registration.getPassword());
	        		
	        String encodedNewPassword = passwordEncoder.encode(resetPasswordDto.getNew_password());
	        System.out.println("New encoded password: " + encodedNewPassword);
	        
	        registration.setPassword(encodedNewPassword);
	        registrationRepository.save(registration);
	        
	        // Log the result of save operation
	        System.out.println("Password update result: " + (registrationRepository.findById(resetPasswordDto.getEmail()).get().getPassword().equals(encodedNewPassword)));
	        
	        return true;
	    }
	    return false;
    }

	@Override
	public boolean validateUser(LoginDto loginDto) {
		Optional<Registration> optionalUser = registrationRepository.findById(loginDto.getEmail());

		// Check if the user is present
	    if (optionalUser.isPresent()) {
	        Registration user = optionalUser.get();
	        // Validate password
	        return passwordEncoder.matches(loginDto.getPassword(), user.getPassword());
	    } else {
	        // User not found
	        return false;
	    }
	}

	@Override
	public Optional<Registration> findById(String email) {
		return registrationRepository.findById(email);
	}
}
